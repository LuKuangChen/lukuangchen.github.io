{"version":3,"sources":["Concepts.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Bombable","boardSize","emptyBoard","makeEmpty","placement","None","airplane","Head","Body","bomb","nrow","ncol","x","Array","fill","map","row","copy","mapBoard","oldBoard","todo","i","cell","j","summarizeBoard","board","base","r","rotateBoard","boardOld","sizeOld","getBoardSize","boardNew","_","length","JSON","parse","stringify","Yes","choice","datum","No","caseChoice","ifYes","ifNo","placeItemOnBoard","item","global","xBase","yBase","itemSize","globalSize","xOffset","yOffset","xFocused","yFocused","overlayItemOnBoard","randomInt","lt","Math","floor","random","randomBoard","totalCount","remained","updated","numRotation","forEach","y","newBoard","View","PlacementValidaty","range","n","from","gameover","ourBoard","survived","quotient","m","trunc","placementOfIndex","orientation","Player","totalItemCount","rotatedItems","knownBoard","validityOfPlacements","Maybe","placeItem","p","mapMaybePlacements","f","filter","initialzeKnowledge","console","log","pi","Invalid","randomPlacementCombination","countOfPlacement","candidates","count","out","indexOf","push","sort","randomManyInt","updateKnowledge","boardView","HitHead","candidatePlacements","index","b","Must","boardAfterPlace","view","matched","HitNone","guessBoards","known","reduce","ih","HitBody","this","theirView","boards","countBoard","Unknown","maxCount","max","maxPositions","ShowBoard","handleClick","_1","_2","handleHover","className","String","fromCharCode","charCodeAt","overlay","onClick","onMouseEnter","App","props","state","initState","kind","hover","undefined","currentState","size","computePreviewBoard","setState","disabled","theirBoard","theirPlayer","handleDropBomb","winner","nextStep","viewBoard","message","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a26e5dc3.chunk.js","sourcesContent":["export type Board<Cell> = Cell[][]\n\nexport interface Cell {\n    placement?: Bombable\n    bomb?: boolean;\n    overlay?: boolean;\n}\n\nexport enum Bombable {\n    None = \"none\",\n    Head = \"head\",\n    Body = \"body\"\n}\n\nexport const boardSize = 10\nexport const emptyBoard: Board<Cell> = makeEmpty(boardSize, boardSize, { placement: Bombable.None })\n\n\nexport const airplane: Board<Cell> = [\n    [{ placement: Bombable.None }, { placement: Bombable.Head }, { placement: Bombable.None }],\n    [{ placement: Bombable.Body }, { placement: Bombable.Body }, { placement: Bombable.Body }],\n    [{ placement: Bombable.None }, { placement: Bombable.Body }, { placement: Bombable.None }],\n    [{ placement: Bombable.Body }, { placement: Bombable.Body }, { placement: Bombable.Body }],\n]\nexport const bomb: Board<Cell> = [[{ bomb: true }]]\n\nfunction makeEmpty<A>(nrow: number, ncol: number, x: A): Board<A> {\n    return new Array(nrow).fill(null).map((row) => {\n        return new Array(ncol).fill(copy(x))\n    })\n}\n\nexport function mapBoard<A, B>(oldBoard: Board<A>, todo: (i: number, j: number, cell: A) => B): Board<B> {\n    return oldBoard.map((row, i) => row.map((cell, j) => todo(i, j, cell)));\n}\nexport function summarizeBoard<A, R>(board: Board<A>, base: R, todo: (i: number, j: number, cell: A, base: R) => R): R {\n    let r: R = base\n    mapBoard(board, (i, j, cell) => {\n        r = todo(i, j, cell, r)\n    })\n    return r;\n}\n\nexport function rotateBoard(boardOld: Board<Cell>) {\n    const sizeOld = getBoardSize(boardOld);\n    const boardNew: Board<Cell> = makeEmpty(sizeOld.ncol, sizeOld.nrow, { placement: Bombable.None });\n    mapBoard(boardNew, (i, j, _) => {\n        // x1    , y1     -> x2    , y2\n        // 0     , 0      -> 0     , nrow-1,\n        // nrow-1, 0      -> 0     , 0\n        // 0     , ncol-1 -> ncol-1, nrow-1\n        // x2 = y1\n        // y2 = nrow - 1 - x1\n        // x1 = nrow - 1 - y2\n        // y1 = x2\n        boardNew[i][j] = boardOld[sizeOld.nrow - 1 - j][i]\n    })\n    return boardNew\n}\n\nexport function getBoardSize<A>(board: Board<A>) {\n    const nrow = board.length;\n    const ncol = board[0].length;\n    return { nrow, ncol }\n}\n\nfunction copy<A>(x: A) {\n    return JSON.parse(JSON.stringify(x))\n}\n\ntype Choice<A, B> = { choice: true, datum: A } | { choice: false, datum: B }\nfunction Yes<A, B>(x: A): Choice<A, B> {\n    return { choice: true, datum: x }\n}\nfunction No<A, B>(x: B): Choice<A, B> {\n    return { choice: false, datum: x }\n}\nexport function caseChoice<A, B, C>(choice: Choice<A, B>, ifYes: (x: A) => C, ifNo: (x: B) => C) {\n    if (choice.choice) {\n        return ifYes(choice.datum)\n    } else {\n        return ifNo(choice.datum)\n    }\n}\nexport function andThen<A1, A2, B>(choice: Choice<A1, B>, todo: (x: A1) => Choice<A2, B>): Choice<A2, B> {\n    return caseChoice(\n        choice,\n        (x) => todo(x),\n        (x) => No(x)\n    )\n}\nexport function orElse<A, B>(choice: Choice<A, B>, fallback: A) {\n    if (choice.choice) {\n        return choice.datum\n    } else {\n        return fallback\n    }\n}\nexport function asYes<A,B>(choice: Choice<A, B>) {\n    return caseChoice(\n        choice,\n        (x) => x,\n        (_) => {\n            throw \"Error!\"\n        }\n    )\n}\n\nexport function placeItemOnBoard(item: Board<Cell>, global: Board<Cell>, xBase: number, yBase: number): Choice<Board<Cell>, string> {\n    global = copy(global);\n    const itemSize = getBoardSize(item);\n    const globalSize = getBoardSize(global);\n    for (let xOffset = 0; xOffset < itemSize.nrow; xOffset++) {\n        for (let yOffset = 0; yOffset < itemSize.ncol; yOffset++) {\n            if (item[xOffset][yOffset].placement !== Bombable.None) {\n                const xFocused = xBase + xOffset;\n                const yFocused = yBase + yOffset;\n                if (0 <= xFocused && xFocused < globalSize.nrow &&\n                    0 <= yFocused && yFocused < globalSize.ncol) {\n                    if (global[xFocused][yFocused].placement === Bombable.None) {\n                        global[xFocused][yFocused].placement = item[xOffset][yOffset].placement\n                    } else {\n                        return No(\"overlap!\")\n                    }\n                } else {\n                    return No(\"out of range\")\n                }\n            } else {\n                continue;\n            }\n        }\n    }\n    return Yes(global)\n}\n\n\nexport function overlayItemOnBoard(item: Board<Cell>, global: Board<Cell>, xBase: number, yBase: number) {\n    global = copy(global);\n    const itemSize = getBoardSize(item);\n    const globalSize = getBoardSize(global);\n    for (let xOffset = 0; xOffset < itemSize.nrow; xOffset++) {\n        for (let yOffset = 0; yOffset < itemSize.ncol; yOffset++) {\n            const xFocused = xBase + xOffset;\n            const yFocused = yBase + yOffset;\n            if (0 <= xFocused && xFocused < globalSize.nrow &&\n                0 <= yFocused && yFocused < globalSize.ncol) {\n                global[xFocused][yFocused] = { ...global[xFocused][yFocused], ...item[xOffset][yOffset] }\n            }\n        }\n    }\n    return global\n}\n\nfunction randomInt(lt: number) {\n    return Math.floor(Math.random() * lt);\n}\nfunction randomManyInt(lt: number, count: number) {\n    const out: number[] = []\n    for (; count > 0; count--) {\n        let i: number\n        do {\n            i = randomInt(lt);\n        } while (out.indexOf(i) >= 0)\n        out.push(i)\n    }\n    return out.sort()\n}\nfunction randomSign() {\n    return (Math.random() < 0.5) ? -1 : 1;\n}\n\nexport function randomBoard(totalCount: number, item: Board<Cell>, board: Board<Cell> = emptyBoard): Board<Cell> {\n    for (let remained = totalCount; remained > 0; remained--) {\n        let updated = false\n        while (!updated) {\n            const numRotation = Math.floor(Math.random() * 4)\n            new Array(numRotation).fill(null).forEach((_) => {\n                item = rotateBoard(item);\n            })\n            const x = Math.floor(Math.random() * boardSize)\n            const y = Math.floor(Math.random() * boardSize)\n            caseChoice(\n                placeItemOnBoard(item, board, x, y),\n                (newBoard) => {\n                    updated = true;\n                    board = newBoard\n                },\n                (_) => { }\n            )\n        }\n    }\n    return board\n}\n\nexport const range = (n: number) => {\n    return Array.from({ length: n }, (x, i) => i);\n}\n\nexport function gameover(ourBoard: Board<Cell>) {\n    return !summarizeBoard(ourBoard, false, (i, j, cell, base) => {\n        const survived = (!cell.bomb && cell.placement === Bombable.Head)\n        return base || survived\n    })\n}\n\nexport enum View { Unknown = \"unknown\", HitHead = \"head\", HitBody = \"body\", HitNone = \"none\" }\n\nfunction boardMatchView(board: Board<Cell>, theirView: Board<View>) {\n    return summarizeBoard(\n        theirView,\n        true,\n        (i, j, view, base) => {\n            let matched: boolean;\n            if (view === View.HitBody) {\n                matched = board[i][j].placement === Bombable.Body\n            } else if (view === View.HitHead) {\n                matched = board[i][j].placement === Bombable.Head\n            } else if (view === View.HitNone) {\n                matched = board[i][j].placement === Bombable.None\n            } else {\n                matched = true;\n            }\n            return base && matched;\n        })\n}\n\nfunction boardKindaMatchView(board: Board<Cell>, theirView: Board<View>) {\n    return summarizeBoard(\n        theirView,\n        true,\n        (i, j, view, base) => {\n            let matched: boolean;\n            if (view === View.HitNone) {\n                matched = ! (board[i][j].placement !== Bombable.None)\n            } else {\n                matched = true;\n            }\n            return base && matched;\n        })\n}\n\n/*\nHow do I approach this problem?\n\nThere are 10×10 positions on board, at each position, there are 4 possible ways (orientation)\nto place the item. Of course, not each of the 10×10×4=400 placement is valid, \n\n1. every placement must not make the item going out of boundary, and\n2. every placement must be consistent with the view.\n\nBesides the two stated constraints, we are picking a fix number (usually 3) of placement out\nof all candidates. The combination of placements must fit with each other, there cannot be any\noverlap.\n\n3. Placements in one combination must not overlap with each other.\n\nNote that all these constraints are enlarged monotonically as the game progress.\n*/\n\nenum PlacementValidaty { Invalid = \"Invalid\", Must = \"Must\", Maybe = \"Maybe\"}\n\ntype Placement = {\n    x: number;\n    y: number;\n    orientation: number;\n}\nconst quotient = (n: number, m: number) => {\n    return Math.trunc(n / m);\n}\nconst remainder = (n: number, m: number) => {\n    return n % m;\n}\nexport const placementOfIndex = (i: number): Placement => {\n    return {\n        x: quotient(quotient(i, 4), 10),\n        y: remainder(quotient(i, 4), 10),\n        orientation: i % 4\n    }\n}\nconst indexOfPlacement = (pl: Placement) => {\n    return (pl.x * 10 + pl.y) * 4 + pl.orientation;\n}\ntype Explanation = Placement[]\nfunction randomExplanationItem() {\n    return {\n        x: randomInt(10),\n        y: randomInt(10),\n        orientation: randomInt(4),\n    }\n}\nexport class Player {\n    totalItemCount: number\n    item: Board<Cell>\n    rotatedItems: Board<Cell>[]  // cache rotated items\n    // Knowledge 1\n    knownBoard = emptyBoard\n    // Knowledge 2\n    validityOfPlacements: PlacementValidaty[] = Array(400).fill(PlacementValidaty.Maybe)\n    placeItem = (p: Placement, board: Board<Cell>) => {\n        return placeItemOnBoard(this.rotatedItems[p.orientation], board, p.x, p.y)\n    }\n    mapMaybePlacements = <A>(f: (pi: number) => A) => {\n        return range(400).filter((i) => {\n            return this.validityOfPlacements[i] === PlacementValidaty.Maybe\n        }).map(f)\n    }\n    initialzeKnowledge = () => {\n        console.log(\"BEGIN\", this.knownBoard)\n        console.log(this.validityOfPlacements)\n        this.mapMaybePlacements((pi) => {\n            caseChoice(\n                this.placeItem(placementOfIndex(pi), this.knownBoard),\n                (_) => { },\n                (_) => {\n                    this.validityOfPlacements[pi] = PlacementValidaty.Invalid\n                }\n            )\n        })\n        console.log(\"END\", this.knownBoard)\n        console.log(this.validityOfPlacements)\n    }\n    // return *countOfPlacement* distinct placements in an array\n    randomPlacementCombination = (countOfPlacement: number) => {\n        const candidates = this.mapMaybePlacements((pi) => pi)\n        const positions = randomManyInt(candidates.length, countOfPlacement).sort()\n        return positions.map((i) => placementOfIndex(candidates[i]))\n    }\n    updateKnowledge = (boardView: Board<View>) => {\n        // Update knownBoard and validityOfPlacements\n        // figure out some fixed states\n        mapBoard(\n            boardView,\n            (i, j, cell) => {\n                // If we found a head hit that isn't explained\n                if (cell === View.HitHead && this.knownBoard[i][j].placement !== Bombable.Head) {\n                    // then we try to find candidate placements that may explain this hit\n                    const candidatePlacements = range(400).filter((index) => {\n                        if (this.validityOfPlacements[index] !== PlacementValidaty.Maybe) {\n                            return false\n                        }\n                        const p = placementOfIndex(index)\n                        return caseChoice(\n                            this.placeItem(p, this.knownBoard),\n                            (b) => {\n                                return b[i][j].placement === Bombable.Head\n                            },\n                            (_) => {\n                                return false\n                            }\n                        )\n                    })\n                    // if there is exactly one candidate, we know the answer\n                    if (candidatePlacements.length === 1) {\n                        const p = candidatePlacements[0]\n                        caseChoice(\n                            this.placeItem(placementOfIndex(p), this.knownBoard),\n                            (b) => {\n                                this.validityOfPlacements[p] = PlacementValidaty.Must\n                                this.knownBoard = b\n                            },\n                            (_) => {\n                                throw \"Internal Error (374)!\"\n                            }\n                        )\n                    } else {\n                        console.log(\"candidatePlacements\", candidatePlacements, candidatePlacements.map(placementOfIndex))\n                    }\n                }\n            }\n        )\n        // disable some placement maybe\n        this.mapMaybePlacements((i) => {\n            const p = placementOfIndex(i);\n            caseChoice(\n                this.placeItem(p, this.knownBoard),\n                (boardAfterPlace) => {\n                    if (!boardKindaMatchView(boardAfterPlace, boardView)) {\n                        console.log(\"Disable 1\", i, p)\n                        this.validityOfPlacements[i] = PlacementValidaty.Invalid\n                    }\n                },\n                (_) => {\n                    console.log(\"Disable 2\", i, p)\n                    this.validityOfPlacements[i] = PlacementValidaty.Invalid\n                }\n            )\n        })\n    }\n    constructor(totalCount: number, item: Board<Cell>) {\n        this.totalItemCount = totalCount\n        this.item = item\n        this.rotatedItems = []\n        for (let i = 0; i < 4; i++) {\n            this.rotatedItems.push(this.item)\n            this.item = rotateBoard(this.item)\n        }\n        this.initialzeKnowledge()\n    }\n    nextStep(theirView: Board<View>) {\n        console.log(\"knownBoard\", this.knownBoard)\n        console.log(\"validityOfPlacements\", this.validityOfPlacements)\n        this.updateKnowledge(theirView)\n        const boards: Board<Cell>[] = this.guessBoards(theirView)\n        const { nrow, ncol } = getBoardSize(theirView)\n        const countBoard = makeEmpty(nrow, ncol, 0);\n        for (const board of boards) {\n            mapBoard(board, (i, j, cell) => {\n                if (cell.placement === Bombable.Head && theirView[i][j] === View.Unknown) {\n                    countBoard[i][j] += 1;\n                }\n            })\n        }\n        const maxCount: number = summarizeBoard(\n            countBoard,\n            0,\n            (i, j, cell, base) => {\n                return Math.max(cell, base)\n            }\n        )\n        const maxPositions: {i: number, j:number}[] = []\n        mapBoard(\n            countBoard,\n            (i, j, cell) => {\n                if (cell === maxCount) {\n                    maxPositions.push({i, j})\n                }\n            }\n        )\n        console.log(\"max count\", maxCount)\n        console.log(maxPositions)\n        return maxPositions[randomInt(maxPositions.length)]\n    }\n    guessBoards = (boardView: Board<View>) => {\n        const out: Board<Cell>[] = []\n        const known = range(400).filter((i) => {\n            return this.validityOfPlacements[i] === PlacementValidaty.Must\n        }).length\n        for (const _ of range(1200)) {\n            const explanation = this.randomPlacementCombination(this.totalItemCount - known)\n            caseChoice(\n                explanation.reduce(\n                    (ih, p) => {\n                        return andThen(ih, (b) => {\n                            return this.placeItem(p, b)\n                        })\n                    },\n                    Yes(this.knownBoard)\n                ),\n                (b) => {\n                    if (boardMatchView(b, boardView)) {\n                        out.push(b)\n                    }\n                },\n                (_) => { }\n            )\n        }\n        return out;\n    }\n}","import React from 'react';\nimport { textChangeRangeIsUnchanged } from 'typescript';\nimport './App.css';\nimport { airplane, Cell, Board, caseChoice, emptyBoard, getBoardSize, placeItemOnBoard, rotateBoard, overlayItemOnBoard, mapBoard, Bombable, randomBoard, bomb, gameover, Player, View, range, placementOfIndex, asYes } from './Concepts';\n\nfunction ShowBoard(\n  board: Board<Cell>,\n  handleClick: (i: number, j: number) => void = (_1, _2) => { return },\n  handleHover: (i: number, j: number) => void = (_1, _2) => { return }) {\n  return (\n    <div className=\"Board\">\n      <table>\n        <tbody>\n          <>\n            {[null, ...board].map((row, i) => {\n              return (<tr>\n                <>\n                  {\n                    (row === null)\n                      ? [null, ...range(board[0].length)].map((x, j) => {\n                        if (x === null) {\n                          return (\n                            <td></td>\n                          )\n                        } else {\n                          return (\n                            <td>{j}</td>\n                          )\n                        }\n                      })\n                      : [null, ...row].map((cell, j) => {\n                        if (cell === null) {\n                          return (\n                            <td>{String.fromCharCode(\"A\".charCodeAt(0) + i - 1)}</td>\n                          )\n                        } else {\n                          return (\n                            <td\n                              className={\n                                \"airplane\" + \"-\" + cell.placement +\n                                (cell.overlay ? \" overlay\" : \"\") +\n                                (cell.bomb ? \" bomb\" : \"\")}\n                              onClick={() => handleClick(i-1, j-1)}\n                              onMouseEnter={() => handleHover(i-1, j-1)}>\n                              {\" \"}\n                            </td>\n                          )\n                        }\n                      })}\n                </>\n              </tr>)\n            })}\n          </>\n        </tbody>\n      </table>\n    </div>\n  )\n}\n\ntype SetupState = {\n  kind: \"setup\"\n  global: Board<Cell>\n  count: number,\n  hover?: { i: number, j: number }\n}\ntype FightingState = {\n  kind: \"fighting\",\n  ourBoard: Board<Cell>\n  theirBoard: Board<Cell>\n  theirPlayer: Player\n}\ntype EndState = {\n  kind: \"end\"\n  winner: \"us\" | \"them\"\n  ourBoard: Board<Cell>\n  theirBoard: Board<Cell>\n}\ntype AppState = (SetupState | FightingState | EndState) & { totalCount: number, item: Board<Cell> }\nclass App extends React.Component<{}, AppState> {\n  constructor(props: {}) {\n    super(props);\n    this.state = this.initState()\n  }\n  initState(): AppState {\n    const totalCount = 3;\n    return {\n      kind: \"setup\",\n      global: emptyBoard,\n      item: airplane,\n      count: totalCount,\n      totalCount: totalCount,\n      hover: undefined\n    }\n  }\n  render() {\n    const currentState = this.state\n    if (currentState.kind === \"setup\") {\n      const handleClick = (i: number, j: number): void => {\n        if (currentState.count > 0) {\n          const size = getBoardSize(currentState.item);\n          i = i - Math.floor(size.nrow / 2)\n          j = j - Math.floor(size.ncol / 2)\n          caseChoice(\n            placeItemOnBoard(currentState.item, currentState.global, i, j),\n            (global) => this.setState({ ...currentState, global, count: currentState.count - 1 }),\n            (_) => { }\n          )\n        }\n      }\n      const handleHover = (i: number, j: number): void => {\n        this.setState({ ...currentState, hover: { i, j } })\n      }\n      const computePreviewBoard = (i: number, j: number) => {\n        const size = getBoardSize(currentState.item);\n        i = i - Math.floor(size.nrow / 2)\n        j = j - Math.floor(size.ncol / 2)\n        const previewItem = mapBoard(currentState.item, (i, j, cell) => {\n          if (cell.placement === Bombable.Head || cell.placement === Bombable.Body) {\n            return { overlay: true };\n          } else {\n            return { overlay: false };\n          }\n        })\n        return overlayItemOnBoard(previewItem, currentState.global, i, j)\n      }\n      const startFighting = () => {\n        this.setState({\n          ...currentState,\n          kind: \"fighting\",\n          ourBoard: currentState.global,\n          theirBoard: randomBoard(currentState.totalCount, currentState.item),\n          theirPlayer: new Player(currentState.totalCount, currentState.item)\n        })\n      }\n      let board = currentState.global;\n      if (currentState.hover) {\n        board = computePreviewBoard(currentState.hover.i, currentState.hover.j)\n      }\n      return (<div>\n        {ShowBoard(board, handleClick, handleHover)}\n        <div onClick={() => { this.setState({ ...currentState, item: rotateBoard(currentState.item) }) }}>\n          {ShowBoard(currentState.item)} × {currentState.count}\n        </div>\n        <button disabled={currentState.count > 0} onClick={(_) => startFighting()}>Start</button>\n      </div>)\n    } else if (currentState.kind === \"fighting\") {\n      const handleDropBomb = (i: number, j: number) => {\n        if (currentState.theirBoard[i][j].bomb) {\n          return\n        }\n        const theirBoard = overlayItemOnBoard(bomb, currentState.theirBoard, i, j)\n        if (gameover(theirBoard)) {\n          this.setState({\n            ...currentState, theirBoard, kind: \"end\", winner: \"us\"\n          })\n        } else {\n          const { i, j } = currentState.theirPlayer.nextStep(viewBoard(currentState.ourBoard))\n          const ourBoard = overlayItemOnBoard(bomb, currentState.ourBoard, i, j)\n          if (gameover(ourBoard)) {\n            this.setState({\n              ...currentState, theirBoard, ourBoard, kind: \"end\", winner: \"them\"\n            })\n          } else {\n            this.setState({\n              ...currentState,\n              theirBoard,\n              ourBoard\n            })\n          }\n        }\n      }\n      return (\n        <div className=\"main\">\n          <div className=\"left\">\n            {ShowBoard(currentState.ourBoard)}\n            <div>-----------------------</div>\n            <div className=\"their\">\n              {ShowBoard(currentState.theirBoard, (i, j) => handleDropBomb(i, j))}\n            </div>\n          </div>\n          <div className=\"right\">\n            {ShowBoard(currentState.theirPlayer.knownBoard)}\n            <>\n            {currentState.theirPlayer.mapMaybePlacements((pi) => {\n              return ShowBoard(\n                asYes(currentState.theirPlayer.placeItem(placementOfIndex(pi), emptyBoard)))\n            })}\n            </>\n          </div>\n        </div>\n      )\n    } else if (currentState.kind === \"end\") {\n      const message = { \"us\": \"You won!\", \"them\": \"You lost!\" }[currentState.winner];\n      return (\n        <div>\n          {message}\n          <button onClick={(_) => this.setState(this.initState())}>Restart</button>\n          {ShowBoard(currentState.ourBoard)}\n          <div>-----------------------</div>\n          {ShowBoard(currentState.theirBoard)}\n        </div>\n      )\n    }\n\n  }\n}\n\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.tsx</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\nexport default App;\n\nfunction viewBoard(ourBoard: Board<Cell>): Board<View> {\n  return mapBoard(ourBoard, (i, j, cell) => {\n    if (cell.bomb) {\n      if (cell.placement === Bombable.Head) {\n        return View.HitHead\n      } else if (cell.placement === Bombable.Body) {\n        return View.HitBody\n      } else {\n        return View.HitNone\n      }\n    } else {\n      return View.Unknown\n    }\n  })\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}