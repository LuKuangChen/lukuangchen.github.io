{"version":3,"sources":["Concepts.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Placement","View","boardSize","emptyBoard","makeEmpty","placement","None","airplane","Head","Body","bomb","nrow","ncol","x","Array","fill","map","row","copy","mapBoard","oldBoard","todo","i","cell","j","summarizeBoard","base","r","rotateBoard","boardOld","sizeOld","getBoardSize","boardNew","_","board","length","JSON","parse","stringify","No","choice","datum","caseChoice","ifYes","ifNo","placeItemOnBoard","item","global","xBase","yBase","itemSize","globalSize","xOffset","yOffset","xFocused","yFocused","overlayItemOnBoard","randomBoard","totalCount","remained","updated","numRotation","Math","floor","random","forEach","y","newBoard","gameover","ourBoard","survived","boardMatchView","theirView","view","matched","HitBody","HitHead","HitNone","Player","explanations","this","moreExplanations","push","filter","generateExplanation","countBoard","Unknown","maxCount","candidates","ShowBoard","handleClick","_1","_2","handleHover","className","overlay","onClick","onMouseEnter","App","props","state","initState","kind","count","hover","undefined","currentState","size","computePreviewBoard","setState","disabled","theirBoard","theirPlayer","handleDropBomb","winner","nextStep","viewBoard","message","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3a01c8a5.chunk.js","sourcesContent":["export type Board<Cell> = Cell[][]\n\nexport interface Cell {\n    placement?: Placement\n    bomb?: boolean;\n    overlay?: boolean;\n}\n\nexport enum Placement {\n    None = \"none\",\n    Head = \"head\",\n    Body = \"body\"\n}\n\nexport const boardSize = 10\nexport const emptyBoard: Board<Cell> = makeEmpty(boardSize, boardSize, { placement: Placement.None })\n\n\nexport const airplane: Board<Cell> = [\n    [{ placement: Placement.None }, { placement: Placement.Head }, { placement: Placement.None }],\n    [{ placement: Placement.Body }, { placement: Placement.Body }, { placement: Placement.Body }],\n    [{ placement: Placement.None }, { placement: Placement.Body }, { placement: Placement.None }],\n    [{ placement: Placement.Body }, { placement: Placement.Body }, { placement: Placement.Body }],\n]\nexport const bomb: Board<Cell> = [[{ bomb: true }]]\n\nfunction makeEmpty<A>(nrow: number, ncol: number, x: A): Board<A> {\n    return new Array(nrow).fill(null).map((row) => {\n        return new Array(ncol).fill(copy(x))\n    })\n}\n\nexport function mapBoard<A, B>(oldBoard: Board<A>, todo: (i: number, j: number, cell: A) => B): Board<B> {\n    return oldBoard.map((row, i) => row.map((cell, j) => todo(i, j, cell)));\n}\nexport function summarizeBoard<A, R>(oldBoard: Board<A>, base: R, todo: (i: number, j: number, cell: A, base: R) => R): R {\n    let r: R = base\n    mapBoard(oldBoard, (i, j, cell) => {\n        r = todo(i, j, cell, r)\n    })\n    return r;\n}\n\nexport function rotateBoard(boardOld: Board<Cell>) {\n    const sizeOld = getBoardSize(boardOld);\n    const boardNew: Board<Cell> = makeEmpty(sizeOld.ncol, sizeOld.nrow, { placement: Placement.None });\n    mapBoard(boardNew, (i, j, _) => {\n        // x1    , y1     -> x2    , y2\n        // 0     , 0      -> 0     , nrow-1,\n        // nrow-1, 0      -> 0     , 0\n        // 0     , ncol-1 -> ncol-1, nrow-1\n        // x2 = y1\n        // y2 = nrow - 1 - x1\n        // x1 = nrow - 1 - y2\n        // y1 = x2\n        boardNew[i][j] = boardOld[sizeOld.nrow - 1 - j][i]\n    })\n    return boardNew\n}\n\nexport function getBoardSize<A>(board: Board<A>) {\n    const nrow = board.length;\n    const ncol = board[0].length;\n    return { nrow, ncol }\n}\n\nfunction copy<A>(x: A) {\n    return JSON.parse(JSON.stringify(x))\n}\n\ntype Choice<A, B> = { choice: true, datum: A } | { choice: false, datum: B }\nfunction Yes<A>(x: A): { choice: true, datum: A } {\n    return { choice: true, datum: x }\n}\nfunction No<B>(x: B): { choice: false, datum: B } {\n    return { choice: false, datum: x }\n}\nexport function caseChoice<A, B, C>(choice: Choice<A, B>, ifYes: (x: A) => C, ifNo: (x: B) => C) {\n    if (choice.choice) {\n        return ifYes(choice.datum)\n    } else {\n        return ifNo(choice.datum)\n    }\n}\n\nexport function orElse<A, B>(choice: Choice<A, B>, fallback: A) {\n    if (choice.choice) {\n        return choice.datum\n    } else {\n        return fallback\n    }\n}\n\nexport function placeItemOnBoard(item: Board<Cell>, global: Board<Cell>, xBase: number, yBase: number): Choice<Board<Cell>, string> {\n    global = copy(global);\n    const itemSize = getBoardSize(item);\n    const globalSize = getBoardSize(global);\n    for (let xOffset = 0; xOffset < itemSize.nrow; xOffset++) {\n        for (let yOffset = 0; yOffset < itemSize.ncol; yOffset++) {\n            if (item[xOffset][yOffset].placement !== Placement.None) {\n                const xFocused = xBase + xOffset;\n                const yFocused = yBase + yOffset;\n                if (0 <= xFocused && xFocused < globalSize.nrow &&\n                    0 <= yFocused && yFocused < globalSize.ncol) {\n                    if (global[xFocused][yFocused].placement === Placement.None) {\n                        global[xFocused][yFocused].placement = item[xOffset][yOffset].placement\n                    } else {\n                        return No(\"overlap!\")\n                    }\n                } else {\n                    return No(\"out of range\")\n                }\n            } else {\n                continue;\n            }\n        }\n    }\n    return Yes(global)\n}\n\n\nexport function overlayItemOnBoard(item: Board<Cell>, global: Board<Cell>, xBase: number, yBase: number) {\n    global = copy(global);\n    const itemSize = getBoardSize(item);\n    const globalSize = getBoardSize(global);\n    for (let xOffset = 0; xOffset < itemSize.nrow; xOffset++) {\n        for (let yOffset = 0; yOffset < itemSize.ncol; yOffset++) {\n            const xFocused = xBase + xOffset;\n            const yFocused = yBase + yOffset;\n            if (0 <= xFocused && xFocused < globalSize.nrow &&\n                0 <= yFocused && yFocused < globalSize.ncol) {\n                global[xFocused][yFocused] = { ...global[xFocused][yFocused], ...item[xOffset][yOffset] }\n            }\n        }\n    }\n    return global\n}\n\nexport function randomBoard(totalCount: number, item: Board<Cell>, board:Board<Cell> =emptyBoard): Board<Cell> {\n    for (let remained = totalCount; remained > 0; remained--) {\n        let updated = false\n        while (!updated) {\n            const numRotation = Math.floor(Math.random() * 4)\n            new Array(numRotation).fill(null).forEach((_) => {\n                item = rotateBoard(item);\n            })\n            const x = Math.floor(Math.random() * boardSize)\n            const y = Math.floor(Math.random() * boardSize)\n            caseChoice(\n                placeItemOnBoard(item, board, x, y),\n                (newBoard) => {\n                    updated = true;\n                    board = newBoard\n                },\n                (_) => { }\n            )\n        }\n    }\n    return board\n}\n\n\n\nexport function gameover(ourBoard: Board<Cell>) {\n    return !summarizeBoard(ourBoard, false, (i, j, cell, base) => {\n        const survived = (!cell.bomb && cell.placement === Placement.Head)\n        return base || survived\n    })\n}\n\n// export function theirTurn(ourBoard: Board<Cell>): { i: any; j: any; } {\n//     // Simplistic implementation\n//     const { nrow, ncol } = getBoardSize(ourBoard)\n//     while (true) {\n//         const i = Math.floor(Math.random() * nrow)\n//         const j = Math.floor(Math.random() * ncol)\n//         if (!ourBoard[i][j].bomb) {\n//             return { i, j }\n//         }\n//     }\n// }\n\nexport enum View { Unknown = \"unknown\", HitHead = \"head\", HitBody = \"body\", HitNone = \"none\" }\n\n\nfunction boardMatchView(board: Board<Cell>, theirView: Board<View>) {\n    return summarizeBoard(\n        theirView,\n        true,\n        (i, j, view, base) => {\n            let matched: boolean;\n            if (view === View.HitBody) {\n                matched = board[i][j].placement === Placement.Body\n            } else if (view === View.HitHead) {\n                matched = board[i][j].placement === Placement.Head\n            } else if (view === View.HitNone) {\n                matched = board[i][j].placement === Placement.None\n            } else {\n                matched = true;\n            }\n            return base && matched;\n        })\n}\n\nexport class Player {\n    totalCount: number\n    item: Board<Cell>\n    explanations: Board<Cell>[]\n    constructor(totalCount: number, item: Board<Cell>) {\n        this.totalCount = totalCount\n        this.item = item\n        this.explanations = []\n    }\n    generateExplanation(explanations: Board<Cell>[], theirView: Board<View>) {\n        const totalCount = this.totalCount\n        const item = this.item\n        const moreExplanations = []\n        for (let i = 0; i < 100; i++) {\n            const board = randomBoard(totalCount, item)\n            if (boardMatchView(board, theirView)) {\n                moreExplanations.push(board)\n            }\n        }\n        return moreExplanations\n    }\n    nextStep(theirView: Board<View>) {\n        const { nrow, ncol } = getBoardSize(theirView)\n        this.explanations = this.explanations.filter((board) => {\n            return boardMatchView(board, theirView)\n        })\n        this.explanations = [...this.explanations, ...this.generateExplanation(this.explanations, theirView)]\n        const countBoard = makeEmpty(nrow, ncol, 0);\n        mapBoard(theirView, (i, j, cell) => {\n            if (cell === View.Unknown) {\n                countBoard[i][j] += 1;\n            }\n        })\n        for (const board of this.explanations) {\n            mapBoard(board, (i, j, cell) => {\n                if (cell.placement === Placement.Head && theirView[i][j] === View.Unknown) {\n                    countBoard[i][j] += 1;\n                }\n            })\n        }\n        const maxCount: number = summarizeBoard(\n            countBoard,\n            0,\n            (i, j, cell, base) => {\n                if (cell > base) {\n                    return cell;\n                } else {\n                    return base\n                }\n            }\n        )\n        const candidates: {i:number, j:number}[] = []\n        mapBoard(\n            countBoard,\n            (i, j, cell) => {\n                if (cell === maxCount) {\n                    candidates.push({i, j})\n                }\n                return\n            }\n        )\n        return candidates[Math.floor(Math.random() * candidates.length)]\n    }\n}\n","import React from 'react';\nimport './App.css';\nimport { airplane, Cell, Board, caseChoice, emptyBoard, getBoardSize, placeItemOnBoard, rotateBoard, overlayItemOnBoard, mapBoard, Placement, randomBoard, bomb, gameover, Player, View } from './Concepts';\n\nfunction ShowBoard(\n  board: Board<Cell>,\n  handleClick: (i: number, j: number) => void = (_1, _2) => { return },\n  handleHover: (i: number, j: number) => void = (_1, _2) => { return }) {\n  return (\n    <div className=\"Board\">\n      <table>\n        <tbody>\n          <>\n            {board.map((row, i) => {\n              return (<tr>\n                <>\n                  {row.map((cell, j) => {\n                    return (\n                      <td\n                        className={\n                          \"airplane\" + \"-\" + cell.placement +\n                          (cell.overlay ? \" overlay\" : \"\") +\n                          (cell.bomb ? \" bomb\" : \"\")}\n                        onClick={() => handleClick(i, j)}\n                        onMouseEnter={() => handleHover(i, j)}>\n                        {\" \"}\n                      </td>\n                    )\n                  })}\n                </>\n              </tr>)\n            })}\n          </>\n        </tbody>\n      </table>\n    </div>\n  )\n}\n\ntype SetupState = {\n  kind: \"setup\"\n  global: Board<Cell>\n  count: number,\n  hover?: { i: number, j: number }\n}\ntype FightingState = {\n  kind: \"fighting\",\n  ourBoard: Board<Cell>\n  theirBoard: Board<Cell>\n  theirPlayer: Player\n}\ntype EndState = {\n  kind: \"end\"\n  winner: \"us\" | \"them\"\n  ourBoard: Board<Cell>\n  theirBoard: Board<Cell>\n}\ntype AppState = (SetupState | FightingState | EndState) & { totalCount: number, item: Board<Cell> }\nclass App extends React.Component<{}, AppState> {\n  constructor(props: {}) {\n    super(props);\n    this.state = this.initState()\n  }\n  initState(): AppState {\n    const totalCount = 3;\n    return {\n      kind: \"setup\",\n      global: emptyBoard,\n      item: airplane,\n      count: totalCount,\n      totalCount: totalCount,\n      hover: undefined\n    }\n  }\n  render() {\n    const currentState = this.state\n    if (currentState.kind === \"setup\") {\n      const handleClick = (i: number, j: number): void => {\n        if (currentState.count > 0) {\n          const size = getBoardSize(currentState.item);\n          i = i - Math.floor(size.nrow / 2)\n          j = j - Math.floor(size.ncol / 2)\n          caseChoice(\n            placeItemOnBoard(currentState.item, currentState.global, i, j),\n            (global) => this.setState({ ...currentState, global, count: currentState.count - 1 }),\n            (_) => { }\n          )\n        }\n      }\n      const handleHover = (i: number, j: number): void => {\n        this.setState({ ...currentState, hover: { i, j } })\n      }\n      const computePreviewBoard = (i: number, j: number) => {\n        const size = getBoardSize(currentState.item);\n        i = i - Math.floor(size.nrow / 2)\n        j = j - Math.floor(size.ncol / 2)\n        const previewItem = mapBoard(currentState.item, (i, j, cell) => {\n          if (cell.placement === Placement.Head || cell.placement === Placement.Body) {\n            return { overlay: true };\n          } else {\n            return { overlay: false };\n          }\n        })\n        return overlayItemOnBoard(previewItem, currentState.global, i, j)\n      }\n      const startFighting = () => {\n        this.setState({\n          ...currentState,\n          kind: \"fighting\",\n          ourBoard: currentState.global,\n          theirBoard: randomBoard(currentState.totalCount, currentState.item),\n          theirPlayer: new Player(currentState.totalCount, currentState.item)\n        })\n      }\n      let board = currentState.global;\n      if (currentState.hover) {\n        board = computePreviewBoard(currentState.hover.i, currentState.hover.j)\n      }\n      return (<div>\n        {ShowBoard(board, handleClick, handleHover)}\n        <div onClick={() => { this.setState({ ...currentState, item: rotateBoard(currentState.item) }) }}>\n          {ShowBoard(currentState.item)} × {currentState.count}\n        </div>\n        <button disabled={currentState.count > 0} onClick={(_) => startFighting()}>Start</button>\n      </div>)\n    } else if (currentState.kind === \"fighting\") {\n      const handleDropBomb = (i: number, j: number) => {\n        if (currentState.theirBoard[i][j].bomb) {\n          return\n        }\n        const theirBoard = overlayItemOnBoard(bomb, currentState.theirBoard, i, j)\n        if (gameover(theirBoard)) {\n          this.setState({\n            ...currentState, theirBoard, kind: \"end\", winner: \"us\"\n          })\n        } else {\n          const { i, j } = currentState.theirPlayer.nextStep(viewBoard(currentState.ourBoard))\n          const ourBoard = overlayItemOnBoard(bomb, currentState.ourBoard, i, j)\n          if (gameover(ourBoard)) {\n            this.setState({\n              ...currentState, theirBoard, ourBoard, kind: \"end\", winner: \"them\"\n            })\n          } else {\n            this.setState({\n              ...currentState,\n              theirBoard,\n              ourBoard\n            })\n          }\n        }\n      }\n      return (\n        <div>\n          {ShowBoard(currentState.ourBoard)}\n          <div>-----------------------</div>\n          <div className=\"their\">\n            {ShowBoard(currentState.theirBoard, (i, j) => handleDropBomb(i, j))}\n          </div>\n        </div>\n      )\n    } else if (currentState.kind === \"end\") {\n      const message = { \"us\": \"You won!\", \"them\": \"You lost!\" }[currentState.winner];\n      return (\n        <div>\n          {message}\n          <button onClick={(_) => this.setState(this.initState())}>Restart</button>\n          {ShowBoard(currentState.ourBoard)}\n          <div>-----------------------</div>\n          {ShowBoard(currentState.theirBoard)}\n        </div>\n      )\n    }\n\n  }\n}\n\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.tsx</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\nexport default App;\n\nfunction viewBoard(ourBoard: Board<Cell>): Board<View> {\n  return mapBoard(ourBoard, (i, j, cell) => {\n    if (cell.bomb) {\n      if (cell.placement === Placement.Head) {\n        return View.HitHead\n      } else if (cell.placement === Placement.Body) {\n        return View.HitBody\n      } else {\n        return View.HitNone\n      }\n    } else {\n      return View.Unknown\n    }\n  })\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}